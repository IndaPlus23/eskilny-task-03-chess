var searchIndex = JSON.parse('{\
"lib":{"doc":"TODO write this comment","t":"NNNNENDNEEDNNNNNNDEDNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Bishop","Black","Check","Checkmate","Colour","FivefoldRepetitionRule","Game","GameOver","GameOverReason","GameState","HistoryEntry","InProgress","InsufficientMaterial","King","Knight","ManualDraw","Pawn","Piece","PieceType","Position","Queen","Rook","SeventyFiveMoveRule","Stalemate","WaitingOnPromotionChoice","White","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","colour","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fen","file","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_char","from_str","get","get_active_colour","get_board","get_game_over_reason","get_game_state","get_history","get_possible_capture_moves","get_possible_moves","get_possible_non_capture_moves","hash","hash","hash","hash","hash","hash","hash","idx","into","into","into","into","into","into","into","into","invert","is_50_move_rule","is_75_move_rule","is_bishop","is_bishop","is_black","is_black","is_check","is_checkmate","is_fivefold_repetition","is_gameover","is_king","is_king","is_knight","is_knight","is_pawn","is_pawn","is_queen","is_queen","is_rook","is_rook","is_threefold_repetition","is_white","is_white","make_move","make_move_pos","new","new","new_from_idx","parse_str","piece_type","put","rank","remove","set_promotion","submit_draw","to_char","to_char","to_char_colourcased","to_char_unicode","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","valid"],"q":[[0,"lib"]],"d":["","","The game is in a state where the active colour’s king is …","This variant is reached automatically when one player is …","The colour of some <code>Piece</code> or player.","This variant is reached automatically when the same exact …","An engine that runs a game of chess. ","The game is over. All state-altering functions will not …","The reason the game game-overed.","The current state of the game.","An entry in the chess engine’s move history.","The game is initialized and playable. The game starts in …","This variant is reached automatically when what remains on …","","","This variant is reached manually through the method …","","Some piece, containing the type of piece and the colour of …","The type of piece referenced.","Some Position on the chessboard.","","","This variant is reached automatically when no move that …","This variant is reached automatically when one player is …","The game is waiting for the user to choose which piece the …","","","","","","","","","","","","","","","","","","Returns an uppercase character that represents the piece …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the Forsyth-Edwards Notation (FEN) of the current …","In chess, the file is the column of the chess board. …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the piece type represented by the char <code>ch</code>.","Returns the piece type represented by the string <code>str</code>.","Returns the <code>Option&lt;Piece&gt;</code> at position <code>pos</code>.","Get the active colour.","Get a copy of the board as a vector of length 8 * 8 of …","Get the game over reason. Is None if the game is not over.","Get the current game state.","Get a vector of contents <code>HistoryEntry</code> which denote the …","Returns all possible new positions of the piece at …","Returns all possible new positions of the piece at …","Returns all possible new positions of the piece at …","","","","","","","","The index of Game.board referenced, some uint 0-63.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the opposite colour","Returns true if the 50-move rule can be enacted, otherwise …","Returns true if the 75-move rule has been enacted, …","Returns true if the piece is a bishop","Returns true if the piece is a bishop","Returns true if self is black","Returns true if the piece is white","Returns true if the active colour’s king is checked, …","Returns true if the active colour’s king is checkmated, …","Returns true if the fivefold repetition rule has been …","Returns true if the game is over, otherwise false.","Returns true if the piece is a king","Returns true if the piece is a king","Returns true if the piece is a knight","Returns true if the piece is a knight","Returns true if the piece is a pawn","Returns true if the piece is a pawn","Returns true if the piece is a queen","Returns true if the piece is a queen","Returns true if the piece is a rook","Returns true if the piece is a rook","Returns true if the threefold repetition rule can be …","Returns true if self is white","Returns true if the piece is white","If the game is not over, try to perform the move <code>from_str</code> …","If the game is not over, try to perform a move between …","Constructor that parses some position on the chessboard …","Initialises a new board with pieces.","Constructor that parses some position on the chessboard …","Constructor that parses some position on the chessboard …","","Puts <code>piece</code> at position <code>pos</code>.","In chess, the rank is the row of the chess board. …","Removes the piece at position <code>pos</code> and returns it.","Set the piece type that a pawn becames following a …","Submits a manual draw and puts the game in game over","Returns a lowercase character representation of the colour","Returns an uppercase character that represents the piece","Returns an uppercase (for white) or lowercase (for black) …","Returns a unicode character that represents the piece","","","","","","","","","","Converts the given position to a String","","","","","","","","","","","","","","","","","","","","","","","","","","Validates self. Errors if self is not valid."],"i":[1,5,3,4,0,4,0,3,0,0,0,3,4,1,1,4,1,0,0,0,1,1,4,4,3,5,3,4,5,1,6,7,8,9,3,4,5,1,6,7,8,9,1,3,4,5,1,6,7,8,9,3,4,5,1,6,7,8,9,6,3,4,5,1,6,7,8,3,4,5,1,6,7,8,9,7,3,4,5,5,1,6,7,8,9,9,3,4,5,1,6,7,8,9,1,1,9,9,9,9,9,9,9,9,9,3,4,5,1,6,7,8,7,3,4,5,1,6,7,8,9,5,9,9,1,6,5,6,9,9,9,9,1,6,1,6,1,6,1,6,1,6,9,5,6,9,9,7,9,7,7,6,9,7,9,9,9,5,6,6,6,3,4,5,1,6,7,8,9,5,7,9,3,4,5,1,6,7,8,9,3,4,5,1,6,7,8,9,3,4,5,1,6,7,8,9,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[3,3],[4,4],[5,5],[1,1],[6,6],[7,7],[8,8],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[3,3],10],[[4,4],10],[[5,5],10],[[1,1],10],[[6,6],10],[[7,7],10],[[8,8],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[9,11],0,[[3,12],13],[[4,12],13],[[5,12],13],[[5,12],13],[[1,12],13],[[6,12],13],[[7,12],13],[[8,12],13],[[9,12],13],[[9,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[14,[1,11]]]],[15,[[14,[1,11]]]],[[9,7],[[14,[[16,[6]],11]]]],[9,5],[9,[[17,[[16,[6]]]]]],[9,[[16,[4]]]],[9,3],[9,[[18,[8]]]],[[9,7],[[14,[[18,[7]],11]]]],[[9,7],[[14,[[18,[7]],11]]]],[[9,7],[[14,[[18,[7]],11]]]],[[3,19]],[[4,19]],[[5,19]],[[1,19]],[[6,19]],[[7,19]],[[8,19]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[9,10],[9,10],[1,10],[6,10],[5,10],[6,10],[9,10],[9,10],[9,10],[9,10],[1,10],[6,10],[1,10],[6,10],[1,10],[6,10],[1,10],[6,10],[1,10],[6,10],[9,10],[5,10],[6,10],[[9,15,15],[[14,[3,11]]]],[[9,7,7],[[14,[3,11]]]],[[20,20],[[14,[7,11]]]],[[],9],[20,[[14,[7,11]]]],[15,[[14,[7,11]]]],0,[[9,7,6],[[14,[11]]]],0,[[9,7],[[14,[[16,[6]],11]]]],[[9,1],[[14,[3,11]]]],[9],[5,2],[6,2],[6,2],[6,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[7,11],[[],11],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[7,[[14,[11]]]]],"c":[],"p":[[4,"PieceType"],[15,"char"],[4,"GameState"],[4,"GameOverReason"],[4,"Colour"],[3,"Piece"],[3,"Position"],[3,"HistoryEntry"],[3,"Game"],[15,"bool"],[3,"String"],[3,"Formatter"],[6,"Result"],[4,"Result"],[15,"str"],[4,"Option"],[15,"array"],[3,"Vec"],[8,"Hasher"],[15,"usize"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
